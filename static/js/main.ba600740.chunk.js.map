{"version":3,"sources":["logo.svg","Hero/images/hero-background.png","Hero/images/oculus.svg","Hero/images/discord.svg","Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","hero","require","oculus","discord","HeroStyled","styled","div","Hero","className","src","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,q4ICG3C,IAAMC,EAAOC,EAAQ,IACfC,EAASD,EAAQ,IACjBE,EAAUF,EAAQ,IAElBG,EAAaC,IAAOC,IAAV,KAwLDC,EAjBF,kBACT,kBAACH,EAAD,KACI,yBAAKI,UAAU,aAAaC,IAAKT,IACjC,yBAAKQ,UAAU,iBACX,wBAAIA,UAAU,oBAAd,yEAAuG,iDAAvG,8EACA,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,oBAAd,sBACA,yBAAKA,UAAU,eAAeC,IAAKP,KAEvC,yBAAKM,UAAU,kBACX,wBAAIA,UAAU,YAAd,uCACA,uBAAGE,KAAK,8BAA6B,yBAAKF,UAAU,gBAAgBC,IAAKN,SC3K1EQ,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCGcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba600740.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero-background.12fb2c96.png\";","module.exports = __webpack_public_path__ + \"static/media/oculus.92112462.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e1847c08.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst hero = require(\"./images/hero-background.png\");\nconst oculus = require(\"./images/oculus.svg\");\nconst discord = require(\"./images/discord.svg\");\n\nconst HeroStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n\n    .hero-image{\n        width: 100%;\n    }\n\n    .content-block{\n        margin: 0 6rem;\n        align-items: center;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n\n        @media (max-width: 900px) {\n            margin: 0 4rem;\n        }\n\n        @media (max-width: 700px) {\n            margin: 0 3.25rem;\n            align-items: flex-start;\n            justify-content: flex-start;\n        }\n\n        @media (max-width: 500px) {\n            margin: 0 2.75rem;\n        }\n\n        h2{\n            font-size: 3.375rem;\n            line-height: 3.75rem;\n            \n            @media (max-width: 900px) {\n                font-size: 2.75rem;\n                line-height: 3.25rem;\n            }\n    \n            @media (max-width: 700px) {\n                font-size: 2.5rem;\n                line-height: 3rem;\n            }\n\n            @media (max-width: 500px) {\n                font-size: 2rem;\n                line-height: 2.5rem;\n            }\n        }\n    \n        .hero-description{\n            margin-top: 6.25rem;\n            max-width: 50.75rem;\n\n            @media (max-width: 900px) {\n                margin-top: 5rem;\n            }\n    \n            @media (max-width: 700px) {\n                margin-top: 4rem;\n            }\n\n            @media (max-width: 500px) {\n                margin-top: 3rem;\n            }\n        }\n    \n        .coming-soon-holder{\n            align-items: center;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            margin-top: 15.625rem;\n\n            @media (max-width: 900px) {\n                margin-top: 12rem;\n            }\n    \n            @media (max-width: 700px) {\n                align-items: flex-start;\n                justify-content: flex-start;\n                margin-top: 10rem;\n            }\n\n            @media (max-width: 500px) {\n                margin-top: 8rem;\n            }\n    \n            .oculus-image{\n                margin-top: 2rem;\n                width: 21.375rem;\n                height: 2.625rem;\n\n                @media (max-width: 900px) {\n                    margin-top: 1.875rem;\n                    width: 18rem;\n                    height: 2.25rem;\n                }\n        \n                @media (max-width: 700px) {\n                    margin-top: 1.75rem;\n                    width: 16rem;\n                    height: 2rem;\n                }\n    \n                @media (max-width: 500px) {\n                    margin-top: 1.675rem;\n                    width: 13.75rem;\n                    height: 1.625rem;\n                }\n            }\n        }\n        .call-to-action{\n            align-items: center;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            margin: 15.625rem 0 18.75rem 0;\n            max-width: 34rem;\n            text-align: center;\n\n            @media (max-width: 900px) {\n                margin: 12rem 0 15rem 0;\n            }\n    \n            @media (max-width: 700px) {\n                margin: 10rem 0 12rem 0;\n                align-items: flex-start;\n                justify-content: flex-start;\n                text-align: left;\n            }\n\n            @media (max-width: 500px) {\n                margin: 8rem 0 10rem 0;\n            }\n    \n            .discord-image{\n                margin-top: 3.75rem;\n                height: 3.75rem;\n                width: 15.625rem;\n\n                @media (max-width: 900px) {\n                    margin-top: 3rem;\n                    height: 3.125rem;\n                    width: 13rem;\n                }\n        \n                @media (max-width: 700px) {\n                    margin-top: 2.5rem;\n                    height: 2.875rem;\n                    width: 12rem;\n                }\n    \n                @media (max-width: 500px) {\n                    margin-top: 1.75rem;\n                    height: 2.4rem;\n                    width: 10rem;\n                }\n            }\n        }\n    }\n\n    \n`\n\nconst Hero = () => (\n    <HeroStyled>\n        <img className=\"hero-image\" src={hero} />\n        <div className=\"content-block\">\n            <h2 className=\"hero-description\">A small community of artists are custodians of a virtual space called <b>Gallery of Freedom</b>. We are experiementing with new ways to interact with and experience art.</h2>\n            <div className=\"coming-soon-holder\">\n                <h2 className=\"coming-soon-text\">coming soon too...</h2>\n                <img className=\"oculus-image\" src={oculus} />\n            </div>\n            <div className=\"call-to-action\">\n                <h2 className=\"cta-text\">In the meantime, join our community</h2>\n                <a href=\"https://discord.gg/ad8wSEZ\"><img className=\"discord-image\" src={discord} /></a>\n            </div>\n        </div>\n    </HeroStyled>\n);\n\nexport default Hero;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Hero from \"./Hero/Hero.js\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hero />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}